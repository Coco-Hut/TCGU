import argparse

def parameter_parser():

    parser = argparse.ArgumentParser()
    parser.add_argument('--device', type=str, default='cuda:0', help='gpu id')
    parser.add_argument('--parallel_gpu_ids', type=list, default=[0,1,2], help='gpu id')
    parser.add_argument('--dataset', type=str, default='cora',choices=['cora','citeseer','pubmed','Photo','Computers'])
    parser.add_argument('--seed', type=int, default=1, help='Random seed.')
    # unlearning task
    parser.add_argument('--unlearn_task', type=str, default='node', choices=['feature', "node", "edge"])
    parser.add_argument('--unlearn_ratio', type=float, default=0.2) 
    # backbone 
    parser.add_argument('--nlayers', type=int, default=2)
    parser.add_argument('--hidden', type=int, default=256)
    parser.add_argument('--activation', type=str, default='relu')
    parser.add_argument('--weight_decay', type=float, default=5e-4)
    parser.add_argument('--dropout', type=float, default=0.05)
    parser.add_argument('--normalize_features', type=bool, default=True)
    parser.add_argument('--batch_size', type=int, default=1024)
    parser.add_argument('--inference', type=bool, default=False)
    parser.add_argument('--teacher_model', type=str, default='GCN')
    parser.add_argument('--validation_model', type=str, default='GCN')
    parser.add_argument('--model', type=str, default='GCN')
    # ratio
    parser.add_argument('--keep_ratio', type=float, default=1.0)
    parser.add_argument('--reduction_rate', type=float, default=0.05,choices=[0.025,0.05,0.075,0.1])
    parser.add_argument('--train_ratio', type=float, default=0.7)
    parser.add_argument('--test_ratio', type=float, default=0.2)
    # condensation
    parser.add_argument('--embed_model',type=str,default='SGC',help='transition model',choices=['SGC'])
    parser.add_argument('--embed_dim',type=int,default=256,help='embedding dimension')
    parser.add_argument('--lr_adj', type=float, default=0.001,choices=[0.001,0.005,0.01,0.05,0.1])
    parser.add_argument('--lr_feat', type=float, default=0.05,choices=[0.001,0.005,0.01,0.05,0.1])
    parser.add_argument('--lr_model', type=float, default=0.001)
    parser.add_argument('--lr_teacher_model', type=float, default=0.001)
    parser.add_argument('--alignment', type=int, default=1)
    parser.add_argument('--ratio',type=float,default=0.35,help='random prjection ratio')
    parser.add_argument('--embed_align_set',type=str,default='train',choices=['all','train'])
    parser.add_argument('--align_mode',type=str,default='cov',help='feature alignment mode',choices=['std','cov','cs']) 
    parser.add_argument('--cov_gamma',type=float,default=0.01,help='cov weight',choices=[0.005,0.01,0.05,0.1]) 
    parser.add_argument('--feat_alpha', type=float, default=100, help='feat loss term.',choices=[50,100,150,200])
    parser.add_argument('--logit_alpha', type=float, default=1, help='logit loss term.')
    parser.add_argument('--smoothness', type=int, default=1)
    parser.add_argument('--smoothness_alpha', type=float, default=0.1, help='smoothness loss term.')
    parser.add_argument('--tau_s',type=int,default=10,help='structure training epoch') 
    parser.add_argument('--tau_f',type=int,default=40,help='feature training epoch') 
    parser.add_argument('--val_mode',type=str,default='retrain',help='validation mode',choices=['retrain']) 
    parser.add_argument('--val_gap',type=int,default=100,help='validation gap')
    parser.add_argument('--threshold', type=float, default=0.05, help='adj threshold.') 
    parser.add_argument('--save', type=int, default=1)
    # fine-tune
    parser.add_argument('--rank',type=int,default=2,help='low rank',choices=[1,2,4,8])
    parser.add_argument('--lora_alpha',type=float,default=1e-2,help='scale coefficient') 
    parser.add_argument('--sim_alpha', type=float, default=1e-3, help='sim dist loss term.') 
    parser.add_argument('--fs_mode',type=str,default='tfs',help='parameter sampling mode',choices=['random','tfs'])
    parser.add_argument('--ft_feat_alpha',type=float,default=100,help='fine-tune feature alignment loss',choices=[50,100,150,200]) 
    parser.add_argument('--reg_alpha',type=float,default=1e-3,help='contrastive regularization',) 
    parser.add_argument('--tau_intra',type=float,default=0.2,help='intra contrast temperature')
    parser.add_argument('--tau_sim',type=float,default=0.2,help='similarity temperature')
    parser.add_argument('--epsilon',type=float,default=1e-6,help='covariance matrix epsilon')
    parser.add_argument('--intra_mode',type=str,default='hard',choices=['soft','hard'])
    parser.add_argument('--random_model',type=str,default='GCN',choices=['GCN','GAT','SGC'])
    parser.add_argument('--param_set_vol',type=int,default=20) 
    parser.add_argument('--sample_interval',type=int,default=20)
    parser.add_argument('--update_interval',type=int,default=10)
    parser.add_argument('--tau_ts',type=int,default=2,help='structure training epoch')
    parser.add_argument('--tau_tf',type=int,default=3,help='feature training epoch') 
    parser.add_argument('--ft_val',type=int,default=2)
    # loop and validation
    parser.add_argument('--teacher_model_loop', type=int, default=200) 
    parser.add_argument('--condensing_loop', type=int, default=2500,choices=[1500,2000,2500]) 
    parser.add_argument('--finetune_loop',type=int,default=20,choices=[15,20,25,30])
    parser.add_argument('--student_model_loop', type=int, default=1000) 
    parser.add_argument('--traject_len',type=int,default=40,choices=[40,50,60])
    parser.add_argument('--teacher_val_stage', type=int, default=50)
    parser.add_argument('--student_val_stage', type=int, default=100)
    
    args = parser.parse_args(args=[])